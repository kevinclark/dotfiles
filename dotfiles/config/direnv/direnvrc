use_oprc() {
	[[ -f .oprc ]] || return 0
	direnv_load op run --env-file .oprc --no-masking -- direnv dump
}

function use_pip-tools() {
    requirements_file=${1:?"a requirements file must be provided as the first argument"}
    shift
    local has_pip=0
    if has pip; then
        if [[ $(which pip) = $PWD/* ]]; then
            has_pip=1
        fi
    fi
    if [ $has_pip -eq 0 ]; then
        echo "[use pip-tools] No pip installed via layout; try layout pyenv or layout python"
        return 1
    fi

    if ! test -f $requirements_file; then
        echo "[use pip-tools] No requirements file $requirements_file"
        return 1
    fi

    if ! has pip-compile; then
        echo "[use pip-tools] pip-tools missing; installing"
        pip install pip-tools
    fi

    requirements_txt=$(echo "$requirements_file" | cut -f 1 -d '.').txt
    if [ $requirements_file -nt $requirements_txt ]; then
        echo "[use pip-tools] resyncing requirements"
        pip-compile "$@" $requirements_file
        pip-sync $requirements_txt
    fi

    watch_file $requirements_file
}

use_chruby()
{
  local version
  version="${1}"

  [[ "${version}" == --auto ]] && version="$(read_version_file .ruby-version)"
  [[ -z "${version}" ]] && return

  local chruby

  if has brew; then
    local brew_prefix
    brew_prefix="$(brew --prefix)"

    if [[ -e "${brew_prefix}/opt/chruby/share/chruby/chruby.sh" ]]; then
      chruby="${brew_prefix}/opt/chruby/share/chruby/chruby.sh"
    fi
  fi

  [[ -z "${chruby}" ]] && [[ -e /usr/local/share/chruby/chruby.sh ]] &&
    chruby=/usr/local/share/chruby/chruby.sh

  [[ -z "${chruby}" ]] && return

  source "${chruby}"
  chruby "${version}"
}

read_version_file()
{
  local file
  file="$(find_up_ "${@}")"

  [[ -z "${file}" ]] && return

  watch_file "${file}"
  ruby -e "puts ARGF.readline" 2> /dev/null "${file}"
}

find_up_()
{
  (
    while true; do
      for v in "${@}"; do
        if [[ -f "${v}" ]]; then
          echo "${PWD}/${v}"
          return 0
        fi
      done

      if [[ "${PWD}" == / ]] || [[ "${PWD}" == // ]]; then
        return 1
      fi

      cd ..
    done
  )
}

source "$(asdf direnv hook asdf)"
